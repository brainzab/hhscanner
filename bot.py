import os
import time
import logging
import json
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.environ.get("CHECK_INTERVAL", "3600"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
DATA_FILE = "user_data.json"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as file:
                user_data = json.load(file)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        user_data = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as file:
            json.dump(user_data, file, ensure_ascii=False, indent=4)
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def init_user_data(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "keywords": [],
            "last_check": None,
            "last_vacancies": [],
            "notification_enabled": True,
            "check_interval": CHECK_INTERVAL
        }
        save_data()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ hh.ru.\n\n"
        "üîç –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_keywords.\n"
        "üìã –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ /settings.\n"
        "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/add_keywords - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "/remove_keywords - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/list_keywords - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/search - –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å–µ–π—á–∞—Å\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üîç –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º –∏ —Å—Ç—Ä–∞–Ω–∞–º."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def add_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_keywords"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä: /add_keywords python django\n"
            "–ò–ª–∏: /add_keywords \"python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\" java"
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
    new_keywords = []
    current_keyword = ""
    in_quotes = False
    
    for arg in ' '.join(context.args).strip():
        if arg == '"' and not in_quotes:
            in_quotes = True
        elif arg == '"' and in_quotes:
            in_quotes = False
            if current_keyword:
                new_keywords.append(current_keyword.strip())
                current_keyword = ""
        elif in_quotes:
            current_keyword += arg
        elif arg == ' ' and not in_quotes:
            if current_keyword:
                new_keywords.append(current_keyword.strip())
                current_keyword = ""
        else:
            current_keyword += arg
    
    if current_keyword:
        new_keywords.append(current_keyword.strip())
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in new_keywords:
        if keyword and keyword not in user_data[str(user_id)]["keywords"]:
            user_data[str(user_id)]["keywords"].append(keyword)
    
    save_data()
    
    if new_keywords:
        keywords_list = "\n‚Ä¢ ".join(user_data[str(user_id)]["keywords"])
        await update.message.reply_text(
            f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
            f"üîç –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n‚Ä¢ {keywords_list}\n\n"
            f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π..."
        )
        await search_vacancies(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

async def remove_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_keywords"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    if not user_data[str(user_id)]["keywords"]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return
    
    keyboard = []
    for keyword in user_data[str(user_id)]["keywords"]:
        keyboard.append([InlineKeyboardButton(f"‚ùå {keyword}", callback_data=f"remove_{keyword}")])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="remove_done")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def list_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_keywords"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    if not user_data[str(user_id)]["keywords"]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é /add_keywords.")
        return
    
    keywords_list = "\n‚Ä¢ ".join(user_data[str(user_id)]["keywords"])
    await update.message.reply_text(f"üîç –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n‚Ä¢ {keywords_list}")

async def search_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –∏ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    if not user_data[str(user_id)]["keywords"]:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_keywords."
        )
        return
    
    await update.message.reply_text("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    all_vacancies = []
    for keyword in user_data[str(user_id)]["keywords"]:
        vacancies = fetch_vacancies(keyword)
        if vacancies:
            all_vacancies.extend(vacancies)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_vacancies = []
    vacancy_ids = set()
    for vacancy in all_vacancies:
        if vacancy["id"] not in vacancy_ids:
            unique_vacancies.append(vacancy)
            vacancy_ids.add(vacancy["id"])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤–Ω–∞—á–∞–ª–µ)
    unique_vacancies.sort(key=lambda x: x["published_at"], reverse=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    user_data[str(user_id)]["last_vacancies"] = [v["id"] for v in unique_vacancies]
    user_data[str(user_id)]["last_check"] = datetime.now().isoformat()
    save_data()
    
    if not unique_vacancies:
        await update.message.reply_text(
            "üîç –ü–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
            "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 10 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
    chunks = [unique_vacancies[i:i+10] for i in range(0, len(unique_vacancies), 10)]
    
    for chunk in chunks:
        message = ""
        for vacancy in chunk:
            published_date = datetime.fromisoformat(vacancy["published_at"].replace("Z", "+00:00"))
            published_str = published_date.strftime("%d.%m.%Y %H:%M")
            
            salary_info = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if vacancy["salary"]:
                from_salary = vacancy["salary"]["from"] if vacancy["salary"]["from"] else ""
                to_salary = vacancy["salary"]["to"] if vacancy["salary"]["to"] else ""
                currency = vacancy["salary"]["currency"] if vacancy["salary"]["currency"] else ""
                
                if from_salary and to_salary:
                    salary_info = f"{from_salary} - {to_salary} {currency}"
                elif from_salary:
                    salary_info = f"–æ—Ç {from_salary} {currency}"
                elif to_salary:
                    salary_info = f"–¥–æ {to_salary} {currency}"
            
            message += f"[{vacancy['name']}]({vacancy['alternate_url']})\n"
            message += f"üè¢ {vacancy['employer']['name']}\n"
            message += f"üí∞ {salary_info}\n"
            message += f"üìÖ {published_str}\n\n"
        
        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)
    
    await update.message.reply_text(
        "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é /settings."
    )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user_id = update.effective_user.id
    init_user_data(user_id)
    
    notification_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data[str(user_id)]["notification_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    check_interval_hours = user_data[str(user_id)]["check_interval"] // 3600
    
    keyboard = [
        [InlineKeyboardButton(
            f"{'üîî' if user_data[str(user_id)]['notification_enabled'] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_status}",
            callback_data="toggle_notifications"
        )],
        [InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval_hours} —á", callback_data="change_interval")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()
    
    if query.data.startswith("remove_"):
        keyword = query.data[7:]  # –û—Ç—Ä–µ–∑–∞–µ–º "remove_"
        
        if keyword == "done":
            await query.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
            return
        
        if keyword in user_data[str(user_id)]["keywords"]:
            user_data[str(user_id)]["keywords"].remove(keyword)
            save_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for kw in user_data[str(user_id)]["keywords"]:
            keyboard.append([InlineKeyboardButton(f"‚ùå {kw}", callback_data=f"remove_{kw}")])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="remove_done")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if user_data[str(user_id)]["keywords"]:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
    
    elif query.data == "toggle_notifications":
        user_data[str(user_id)]["notification_enabled"] = not user_data[str(user_id)]["notification_enabled"]
        save_data()
        
        notification_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data[str(user_id)]["notification_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        check_interval_hours = user_data[str(user_id)]["check_interval"] // 3600
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'üîî' if user_data[str(user_id)]['notification_enabled'] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_status}",
                callback_data="toggle_notifications"
            )],
            [InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval_hours} —á", callback_data="change_interval")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    
    elif query.data == "change_interval":
        intervals = [1, 3, 6, 12, 24]
        keyboard = []
        row = []
        for hours in intervals:
            row.append(InlineKeyboardButton(f"{hours} —á", callback_data=f"set_interval_{hours}"))
            if len(row) == 3:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=reply_markup)
    
    elif query.data.startswith("set_interval_"):
        hours = int(query.data[13:])  # –û—Ç—Ä–µ–∑–∞–µ–º "set_interval_"
        user_data[str(user_id)]["check_interval"] = hours * 3600
        save_data()
        
        notification_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data[str(user_id)]["notification_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'üîî' if user_data[str(user_id)]['notification_enabled'] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_status}",
                callback_data="toggle_notifications"
            )],
            [InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {hours} —á", callback_data="change_interval")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    
    elif query.data == "back_to_settings":
        notification_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data[str(user_id)]["notification_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        check_interval_hours = user_data[str(user_id)]["check_interval"] // 3600
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'üîî' if user_data[str(user_id)]['notification_enabled'] else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_status}",
                callback_data="toggle_notifications"
            )],
            [InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval_hours} —á", callback_data="change_interval")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    
    elif query.data == "settings_done":
        await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def fetch_vacancies(keyword):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru API"""
    try:
        url = "https://api.hh.ru/vacancies"
        params = {
            "text": keyword,
            "schedule": "remote",  # –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
            "per_page": 100,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            "order_by": "publication_time"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        }
        
        headers = {
            "User-Agent": "JobSearchTelegramBot/1.0"
        }
        
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        return data.get("items", [])
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return []

async def check_new_vacancies(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    now = datetime.now()
    
    for user_id, data in user_data.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not data["notification_enabled"]:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if data["last_check"]:
            last_check = datetime.fromisoformat(data["last_check"])
            next_check = last_check + timedelta(seconds=data["check_interval"])
            
            if now < next_check:
                continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not data["keywords"]:
            continue
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        all_vacancies = []
        for keyword in data["keywords"]:
            vacancies = fetch_vacancies(keyword)
            if vacancies:
                all_vacancies.extend(vacancies)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_vacancies = []
        vacancy_ids = set()
        for vacancy in all_vacancies:
            if vacancy["id"] not in vacancy_ids:
                unique_vacancies.append(vacancy)
                vacancy_ids.add(vacancy["id"])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤–Ω–∞—á–∞–ª–µ)
        unique_vacancies.sort(key=lambda x: x["published_at"], reverse=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        new_vacancies = []
        for vacancy in unique_vacancies:
            if vacancy["id"] not in data["last_vacancies"]:
                new_vacancies.append(vacancy)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]["last_vacancies"] = [v["id"] for v in unique_vacancies]
        user_data[user_id]["last_check"] = now.isoformat()
        save_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
        if new_vacancies:
            try:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text=f"üîî –ù–∞–π–¥–µ–Ω–æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º!"
                )
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 10 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
                chunks = [new_vacancies[i:i+10] for i in range(0, len(new_vacancies), 10)]
                
                for chunk in chunks:
                    message = ""
                    for vacancy in chunk:
                        published_date = datetime.fromisoformat(vacancy["published_at"].replace("Z", "+00:00"))
                        published_str = published_date.strftime("%d.%m.%Y %H:%M")
                        
                        salary_info = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        if vacancy["salary"]:
                            from_salary = vacancy["salary"]["from"] if vacancy["salary"]["from"] else ""
                            to_salary = vacancy["salary"]["to"] if vacancy["salary"]["to"] else ""
                            currency = vacancy["salary"]["currency"] if vacancy["salary"]["currency"] else ""
                            
                            if from_salary and to_salary:
                                salary_info = f"{from_salary} - {to_salary} {currency}"
                            elif from_salary:
                                salary_info = f"–æ—Ç {from_salary} {currency}"
                            elif to_salary:
                                salary_info = f"–¥–æ {to_salary} {currency}"
                        
                        message += f"[{vacancy['name']}]({vacancy['alternate_url']})\n"
                        message += f"üè¢ {vacancy['employer']['name']}\n"
                        message += f"üí∞ {salary_info}\n"
                        message += f"üìÖ {published_str}\n\n"
                    
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    load_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_keywords", add_keywords))
    application.add_handler(CommandHandler("remove_keywords", remove_keywords))
    application.add_handler(CommandHandler("list_keywords", list_keywords))
    application.add_handler(CommandHandler("search", search_vacancies))
    application.add_handler(CommandHandler("settings", settings))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    job_queue = application.job_queue
    job_queue.run_repeating(check_new_vacancies, interval=60, first=10)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()